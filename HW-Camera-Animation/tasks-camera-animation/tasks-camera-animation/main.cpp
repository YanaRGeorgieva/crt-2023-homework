#include <fstream>
#include <vector>
#include <string>
#include <cstdlib>
#include <ctime>  

#include "CRTRay.h"
#include "CRTCamera.h"
#include "CRTTriangle.h"
#include "CRTTriangle.h"
#include "CRTMatrix.h"
#include "utils.h"

void solutionMultipleTriangle(
	CRTCamera& camera,
	const std::vector<CRTTriangle>& triangles,
	const char* fileName,
	const std::vector<RGBColor>& colors) {
	std::ofstream ppmFileStream(std::string(fileName) + ".ppm", std::ios::out | std::ios::binary);
	ppmFileStream << "P3\n";
	ppmFileStream << imageWidth << " " << imageHeight << std::endl;
	ppmFileStream << maxColorComponent << std::endl;

	RGBColor returnColor{};
	// Generate triangles normal vectors : normalize(cross(E0, E1)) - precomputed 
	// At each pixel :
	for (int rowIdx = 0; rowIdx < imageHeight; ++rowIdx) {
		for (int colIdx = 0; colIdx < imageWidth; ++colIdx) {
			returnColor = RGBColor{ 0, 0, 0 };
			// Generate camera ray R : 3rd Lecture taking into account the camera position
			CRTRay cameraRay = camera.generateCameraRay(rowIdx, colIdx);
			// For now I don't use the idxTriangle, but in future it will be useful
			long long idxTriangle = CRTTriangle::intersectRayWithTraingles(cameraRay, triangles, colors, returnColor);
			ppmFileStream << (int)returnColor.r << " " << (int)returnColor.g << " " << (int)returnColor.b << "\t";
		}
		ppmFileStream << std::endl;
	}
	ppmFileStream.close();
}

void generateDino(std::vector<CRTTriangle>& triangles, std::vector<RGBColor>& colors) {
	std::vector<CRTVector> vertices = { CRTVector(0.9430769, 1.003828, 1.205299),
	  CRTVector(1.439393, 0.4402993, -1.409077),
	  CRTVector(0.7013722, -1, 1),
	  CRTVector(1, -1, -1),
	  CRTVector(0.3486793, -2.479633, 0.3486793),
	  CRTVector(0.3486793, -2.479633, -0.3486793),
	  CRTVector(0.7013722, -2.068337, 2.861523),
	  CRTVector(0.3486793, -2.67771, 1.364126),
	  CRTVector(0.8446236, -3.479507, 3.567587),
	  CRTVector(0.4469716, -3.335896, 1.500196),
	  CRTVector(0.7558024, -5.90571, 2.766229),
	  CRTVector(0.1824267, -5.849595, 1.958405),
	  CRTVector(1.233091, 2.358336, -1.835237),
	  CRTVector(0.9344628, 2.50411, 0.8481122),
	  CRTVector(1.02826, 3.413751, -1.20961),
	  CRTVector(0.8092843, 3.469427, 0.8879405),
	  CRTVector(0.4777897, 6.652469, -0.3231238),
	  CRTVector(0.3351084, 6.652469, 0.6324558),
	  CRTVector(0.4777897, 8.301501, -0.6065593),
	  CRTVector(0.3351084, 8.464846, 0.3349558),
	  CRTVector(0.2658017, 10.45704, -0.7653692),
	  CRTVector(0.1864259, 10.54791, -0.2415903),
	  CRTVector(0, 1, -1.66199),
	  CRTVector(0, -1, 1),
	  CRTVector(0, -1, -1),
	  CRTVector(0, 1, 1.01243),
	  CRTVector(0, -2.479633, 0.3486793),
	  CRTVector(0, -2.479633, -0.3486793),
	  CRTVector(0, -2.068337, 2.861523),
	  CRTVector(0, -2.67771, 1.364126),
	  CRTVector(0, -3.479507, 3.771894),
	  CRTVector(0, -3.335896, 1.500196),
	  CRTVector(0, -5.90571, 2.970536),
	  CRTVector(0, -5.849595, 1.958405),
	  CRTVector(0, 2.360955, -1.631001),
	  CRTVector(0, 2.416631, 1),
	  CRTVector(0, 3.413751, -1.20961),
	  CRTVector(0, 3.469427, 0.8879405),
	  CRTVector(0, 6.652469, -0.3231238),
	  CRTVector(0, 6.652469, 0.6324558),
	  CRTVector(0, 8.301501, -0.6065593),
	  CRTVector(0, 8.464846, 0.3349558),
	  CRTVector(0, 10.45704, -0.7653692),
	  CRTVector(0, 10.54791, -0.2415903),
	  CRTVector(1.305701, 1.125256, 1.022652),
	  CRTVector(2.541386, 0.8129162, -1.025689),
	  CRTVector(1.046624, 2.747045, 0.6703199),
	  CRTVector(2.083581, 2.87901, -1.412639),
	  CRTVector(0.8593392, 2.130802, -3.577174),
	  CRTVector(1.35359, 1.224639, -4.037474),
	  CRTVector(1.938395, 2.40904, -2.993384),
	  CRTVector(2.463366, 1.478089, -3.630363),
	  CRTVector(1.120376, 3.490574, -4.068244),
	  CRTVector(1.620884, 2.46459, -4.359732),
	  CRTVector(2.213094, 4.126321, -3.649784),
	  CRTVector(2.744711, 2.858847, -4.07619),
	  CRTVector(1.363623, 0.5662484, -3.536673),
	  CRTVector(2.496371, 0.7871783, -3.096161),
	  CRTVector(0.857077, 1.663586, -2.991867),
	  CRTVector(1.973013, 1.938111, -2.630206),
	  CRTVector(1.199952, 3.546183, -4.26523),
	  CRTVector(1.70046, 2.520198, -4.346997),
	  CRTVector(2.29267, 3.927869, -4.078178),
	  CRTVector(2.824287, 2.914456, -4.063454),
	  CRTVector(1.913444, 3.015325, -5.482182),
	  CRTVector(2.183461, 2.497508, -5.396155),
	  CRTVector(2.506849, 3.503712, -5.582138),
	  CRTVector(2.766314, 2.696491, -5.346401),
	  CRTVector(3.637303, 2.017293, -6.192024),
	  CRTVector(3.674258, 1.586593, -6.204422),
	  CRTVector(3.679246, 1.712613, -5.759041),
	  CRTVector(3.551795, 2.109127, -5.874838),
	  CRTVector(2.924952, 0.8401524, -6.231612),
	  CRTVector(2.657263, 0.817937, -6.237517),
	  CRTVector(2.666849, 0.8660977, -5.845404),
	  CRTVector(2.929528, 0.9557748, -5.822981),
	  CRTVector(1.290336, 1.842638, -6.229039),
	  CRTVector(1.358683, 1.599186, -6.249888),
	  CRTVector(1.367826, 1.645119, -5.875918),
	  CRTVector(1.251766, 1.867689, -5.912894),
	  CRTVector(2.75616, 2.439939, -6.253105),
	  CRTVector(2.680926, 3.316757, -6.227866),
	  CRTVector(2.162189, 2.390646, -6.266207),
	  CRTVector(2.003178, 2.957043, -6.2177),
	  CRTVector(0.1417535, 11.8004, -0.6231409),
	  CRTVector(0.1727996, 11.76486, -0.8280053),
	  CRTVector(0, 11.8004, -0.6231409),
	  CRTVector(0, 11.76486, -0.8280053),
	  CRTVector(0.8912217, -1.19996, 0.6706345),
	  CRTVector(0.8763603, -1.376654, -0.7635211),
	  CRTVector(0.7004507, -2.000291, 0.3183363),
	  CRTVector(0.5240621, -2.176985, -0.4112228),
	  CRTVector(1.304843, -1.847025, -1.413818),
	  CRTVector(0.9551477, -2.15609, -1.456171),
	  CRTVector(1.252874, -2.249435, -1.034099),
	  CRTVector(1.058505, -2.287972, -1.168007),
	  CRTVector(1.299324, -2.738629, -1.997319),
	  CRTVector(1.098663, -2.80657, -1.714606),
	  CRTVector(1.440804, -2.818035, -1.809866),
	  CRTVector(1.316557, -2.818242, -1.616491),
	  CRTVector(1.281216, -3.115567, -1.726205),
	  CRTVector(1.370385, -3.115419, -1.864985),
	  CRTVector(1.124839, -3.107191, -1.79662),
	  CRTVector(1.268848, -3.058431, -1.999517),
	  CRTVector(0.829905, -3.284765, -1.610162),
	  CRTVector(0.921088, -3.28965, -1.569103),
	  CRTVector(0.9038322, -3.412037, -1.62997),
	  CRTVector(0.8577798, -3.40957, -1.650707),
	  CRTVector(1.38748, -3.179317, -2.237387),
	  CRTVector(1.336305, -3.150595, -2.305191),
	  CRTVector(1.324475, -3.270635, -2.289624),
	  CRTVector(1.350321, -3.285141, -2.255379),
	  CRTVector(1.138914, -3.546424, -2.015489),
	  CRTVector(1.083343, -3.565239, -1.937195),
	  CRTVector(1.143687, -3.568472, -1.910023),
	  CRTVector(1.178095, -3.568414, -1.963576),
	  CRTVector(1.039665, -2.705855, -1.714593),
	  CRTVector(1.355095, -2.57402, -1.883759),
	  CRTVector(1.408074, -2.725627, -1.62768),
	  CRTVector(1.248666, -2.745788, -1.483851),
	  CRTVector(1.015185, -2.831168, 3.243197),
	  CRTVector(0.4018128, -3.033504, 1.437681),
	  CRTVector(0, -3.033504, 1.437681),
	  CRTVector(0, -2.831168, 3.243197),
	  CRTVector(1.007345, -2.164023, -0.4502764),
	  CRTVector(1.222173, -1.473295, -0.6440083),
	  CRTVector(0.8223611, -2.205499, -0.8288254),
	  CRTVector(0.9748812, -1.605758, -1.179678),
	  CRTVector(-0.9430769, 1.003828, 1.205299),
	  CRTVector(-1.439393, 0.4402993, -1.409077),
	  CRTVector(-0.7013722, -1, 1),
	  CRTVector(-1, -1, -1),
	  CRTVector(-0.3486793, -2.479633, 0.3486793),
	  CRTVector(-0.3486793, -2.479633, -0.3486793),
	  CRTVector(-0.7013722, -2.068337, 2.861523),
	  CRTVector(-0.3486793, -2.67771, 1.364126),
	  CRTVector(-0.8446236, -3.479507, 3.567587),
	  CRTVector(-0.4469716, -3.335896, 1.500196),
	  CRTVector(-0.7558024, -5.90571, 2.766229),
	  CRTVector(-0.1824267, -5.849595, 1.958405),
	  CRTVector(-1.233091, 2.358336, -1.835237),
	  CRTVector(-0.9344628, 2.50411, 0.8481122),
	  CRTVector(-1.02826, 3.413751, -1.20961),
	  CRTVector(-0.8092843, 3.469427, 0.8879405),
	  CRTVector(-0.4777897, 6.652469, -0.3231238),
	  CRTVector(-0.3351084, 6.652469, 0.6324558),
	  CRTVector(-0.4777897, 8.301501, -0.6065593),
	  CRTVector(-0.3351084, 8.464846, 0.3349558),
	  CRTVector(-0.2658017, 10.45704, -0.7653692),
	  CRTVector(-0.1864259, 10.54791, -0.2415903),
	  CRTVector(-1.305701, 1.125256, 1.022652),
	  CRTVector(-2.541386, 0.8129162, -1.025689),
	  CRTVector(-1.046624, 2.747045, 0.6703199),
	  CRTVector(-2.083581, 2.87901, -1.412639),
	  CRTVector(-0.8593392, 2.130802, -3.577174),
	  CRTVector(-1.35359, 1.224639, -4.037474),
	  CRTVector(-1.938395, 2.40904, -2.993384),
	  CRTVector(-2.463366, 1.478089, -3.630363),
	  CRTVector(-1.120376, 3.490574, -4.068244),
	  CRTVector(-1.620884, 2.46459, -4.359732),
	  CRTVector(-2.213094, 4.126321, -3.649784),
	  CRTVector(-2.744711, 2.858847, -4.07619),
	  CRTVector(-1.363623, 0.5662484, -3.536673),
	  CRTVector(-2.496371, 0.7871783, -3.096161),
	  CRTVector(-0.857077, 1.663586, -2.991867),
	  CRTVector(-1.973013, 1.938111, -2.630206),
	  CRTVector(-1.199952, 3.546183, -4.26523),
	  CRTVector(-1.70046, 2.520198, -4.346997),
	  CRTVector(-2.29267, 3.927869, -4.078178),
	  CRTVector(-2.824287, 2.914456, -4.063454),
	  CRTVector(-1.913444, 3.015325, -5.482182),
	  CRTVector(-2.183461, 2.497508, -5.396155),
	  CRTVector(-2.506849, 3.503712, -5.582138),
	  CRTVector(-2.766314, 2.696491, -5.346401),
	  CRTVector(-3.637303, 2.017293, -6.192024),
	  CRTVector(-3.674258, 1.586593, -6.204422),
	  CRTVector(-3.679246, 1.712613, -5.759041),
	  CRTVector(-3.551795, 2.109127, -5.874838),
	  CRTVector(-2.924952, 0.8401524, -6.231612),
	  CRTVector(-2.657263, 0.817937, -6.237517),
	  CRTVector(-2.666849, 0.8660977, -5.845404),
	  CRTVector(-2.929528, 0.9557748, -5.822981),
	  CRTVector(-1.290336, 1.842638, -6.229039),
	  CRTVector(-1.358683, 1.599186, -6.249888),
	  CRTVector(-1.367826, 1.645119, -5.875918),
	  CRTVector(-1.251766, 1.867689, -5.912894),
	  CRTVector(-2.75616, 2.439939, -6.253105),
	  CRTVector(-2.680926, 3.316757, -6.227866),
	  CRTVector(-2.162189, 2.390646, -6.266207),
	  CRTVector(-2.003178, 2.957043, -6.2177),
	  CRTVector(-0.1417535, 11.8004, -0.6231409),
	  CRTVector(-0.1727996, 11.76486, -0.8280053),
	  CRTVector(-0.8912217, -1.19996, 0.6706345),
	  CRTVector(-0.8763603, -1.376654, -0.7635211),
	  CRTVector(-0.7004507, -2.000291, 0.3183363),
	  CRTVector(-0.5240621, -2.176985, -0.4112228),
	  CRTVector(-1.304843, -1.847025, -1.413818),
	  CRTVector(-0.9551477, -2.15609, -1.456171),
	  CRTVector(-1.252874, -2.249435, -1.034099),
	  CRTVector(-1.058505, -2.287972, -1.168007),
	  CRTVector(-1.299324, -2.738629, -1.997319),
	  CRTVector(-1.098663, -2.80657, -1.714606),
	  CRTVector(-1.440804, -2.818035, -1.809866),
	  CRTVector(-1.316557, -2.818242, -1.616491),
	  CRTVector(-1.281216, -3.115567, -1.726205),
	  CRTVector(-1.370385, -3.115419, -1.864985),
	  CRTVector(-1.124839, -3.107191, -1.79662),
	  CRTVector(-1.268848, -3.058431, -1.999517),
	  CRTVector(-0.829905, -3.284765, -1.610162),
	  CRTVector(-0.921088, -3.28965, -1.569103),
	  CRTVector(-0.9038322, -3.412037, -1.62997),
	  CRTVector(-0.8577798, -3.40957, -1.650707),
	  CRTVector(-1.38748, -3.179317, -2.237387),
	  CRTVector(-1.336305, -3.150595, -2.305191),
	  CRTVector(-1.324475, -3.270635, -2.289624),
	  CRTVector(-1.350321, -3.285141, -2.255379),
	  CRTVector(-1.138914, -3.546424, -2.015489),
	  CRTVector(-1.083343, -3.565239, -1.937195),
	  CRTVector(-1.143687, -3.568472, -1.910023),
	  CRTVector(-1.178095, -3.568414, -1.963576),
	  CRTVector(-1.039665, -2.705855, -1.714593),
	  CRTVector(-1.355095, -2.57402, -1.883759),
	  CRTVector(-1.408074, -2.725627, -1.62768),
	  CRTVector(-1.248666, -2.745788, -1.483851),
	  CRTVector(-1.015185, -2.831168, 3.243197),
	  CRTVector(-0.4018128, -3.033504, 1.437681),
	  CRTVector(-1.007345, -2.164023, -0.4502764),
	  CRTVector(-1.222173, -1.473295, -0.6440083),
	  CRTVector(-0.8223611, -2.205499, -0.8288254),
	  CRTVector(-0.9748812, -1.605758, -1.179678) };

	const std::vector<int> faces =
	{ 22,1,3,22,3,24,1,0,2,1,2,3,24,3,5,24,5,27,26,4,7,26,7,29,2,4,90,2,90,88,121,120,8,121,8,9,4,2,6,4,6,7,122,121,9,122,9,31,9,8,10,9,10,11,31,9,11,31,11,33,35,13,15,35,15,37,25,0,13,25,13,35,57,56,49,57,49,51,15,14,16,15,16,17,13,12,14,13,14,15,37,15,17,37,17,39,41,19,21,41,21,43,39,17,19,39,19,41,17,16,18,17,18,19,20,42,87,20,87,85,19,18,20,19,20,21,18,40,42,18,42,20,16,38,40,16,40,18,14,36,38,14,38,16,12,34,36,12,36,14,10,32,33,10,33,11,8,30,32,8,32,10,120,123,30,120,30,8,5,4,26,5,26,27,0,25,23,0,23,2,2,23,28,2,28,6,1,22,34,1,34,12,44,45,47,44,47,46,12,13,46,12,46,47,0,1,45,0,45,44,13,0,44,13,44,46,48,50,54,48,54,52,56,58,48,56,48,49,58,59,50,58,50,48,59,57,51,59,51,50,52,54,62,52,62,60,49,48,52,49,52,53,51,49,53,51,53,55,50,51,55,50,55,54,47,45,57,47,57,59,12,47,59,12,59,58,1,12,58,1,58,56,45,1,56,45,56,57,63,61,65,63,65,67,53,52,60,53,60,61,55,53,61,55,61,63,54,55,62,55,63,62,65,64,79,65,79,78,62,63,67,62,67,66,60,62,66,60,66,64,61,60,64,61,64,65,67,80,69,67,69,70,65,82,73,65,73,74,80,67,75,80,75,72,78,79,76,78,76,77,80,81,68,80,68,69,82,80,72,82,72,73,64,83,76,64,76,79,66,67,70,66,70,71,67,65,74,67,74,75,71,70,69,71,69,68,83,82,77,83,77,76,81,66,71,81,71,68,64,66,81,64,81,83,75,74,73,75,73,72,82,83,81,82,81,80,82,65,78,82,78,77,87,86,84,87,84,85,21,20,85,21,85,84,43,21,84,43,84,86,125,124,94,125,94,92,3,2,88,3,88,89,5,3,89,5,89,91,4,5,91,4,91,90,119,116,97,119,97,99,124,126,95,124,95,94,126,127,93,126,93,95,127,125,92,127,92,93,98,101,111,98,111,108,116,117,96,116,96,97,117,118,98,117,98,96,118,119,99,118,99,98,98,99,100,98,100,101,97,96,103,97,103,102,99,97,104,99,104,105,101,100,114,101,114,115,105,104,107,105,107,106,97,102,107,97,107,104,102,100,106,102,106,107,100,99,105,100,105,106,109,108,111,109,111,110,96,98,108,96,108,109,101,103,110,101,110,111,103,96,109,103,109,110,113,112,115,113,115,114,102,103,112,102,112,113,103,101,115,103,115,112,100,102,113,100,113,114,94,95,119,94,119,118,92,94,118,92,118,117,93,92,117,93,117,116,95,93,116,95,116,119,6,28,123,6,123,120,29,7,121,29,121,122,7,6,120,7,120,121,89,88,125,89,125,127,91,89,127,91,127,126,90,91,126,90,126,124,88,90,124,88,124,125,22,24,131,22,131,129,129,131,130,129,130,128,24,27,133,24,133,131,26,29,135,26,135,132,130,192,194,130,194,132,225,137,136,225,136,224,132,135,134,132,134,130,122,31,137,122,137,225,137,139,138,137,138,136,31,33,139,31,139,137,35,37,143,35,143,141,25,35,141,25,141,128,163,157,155,163,155,162,143,145,144,143,144,142,141,143,142,141,142,140,37,39,145,37,145,143,41,43,149,41,149,147,39,41,147,39,147,145,145,147,146,145,146,144,148,191,87,148,87,42,147,149,148,147,148,146,146,148,42,146,42,40,144,146,40,144,40,38,142,144,38,142,38,36,140,142,36,140,36,34,138,139,33,138,33,32,136,138,32,136,32,30,224,136,30,224,30,123,133,27,26,133,26,132,128,130,23,128,23,25,130,134,28,130,28,23,129,140,34,129,34,22,150,152,153,150,153,151,140,153,152,140,152,141,128,150,151,128,151,129,141,152,150,141,150,128,154,158,160,154,160,156,162,155,154,162,154,164,164,154,156,164,156,165,165,156,157,165,157,163,158,166,168,158,168,160,155,159,158,155,158,154,157,161,159,157,159,155,156,160,161,156,161,157,153,165,163,153,163,151,140,164,165,140,165,153,129,162,164,129,164,140,151,163,162,151,162,129,169,173,171,169,171,167,159,167,166,159,166,158,161,169,167,161,167,159,160,168,161,168,169,161,171,184,185,171,185,170,168,172,173,168,173,169,166,170,172,166,172,168,167,171,170,167,170,166,173,176,175,173,175,186,171,180,179,171,179,188,186,178,181,186,181,173,184,183,182,184,182,185,186,175,174,186,174,187,188,179,178,188,178,186,170,185,182,170,182,189,172,177,176,172,176,173,173,181,180,173,180,171,177,174,175,177,175,176,189,182,183,189,183,188,187,174,177,187,177,172,170,189,187,170,187,172,181,178,179,181,179,180,188,186,187,188,187,189,188,183,184,188,184,171,87,191,190,87,190,86,149,190,191,149,191,148,43,86,190,43,190,149,227,196,198,227,198,226,131,193,192,131,192,130,133,195,193,133,193,131,132,194,195,132,195,133,223,203,201,223,201,220,226,198,199,226,199,228,228,199,197,228,197,229,229,197,196,229,196,227,202,212,215,202,215,205,220,201,200,220,200,221,221,200,202,221,202,222,222,202,203,222,203,223,202,205,204,202,204,203,201,206,207,201,207,200,203,209,208,203,208,201,205,219,218,205,218,204,209,210,211,209,211,208,201,208,211,201,211,206,206,211,210,206,210,204,204,210,209,204,209,203,213,214,215,213,215,212,200,213,212,200,212,202,205,215,214,205,214,207,207,214,213,207,213,200,217,218,219,217,219,216,206,217,216,206,216,207,207,216,219,207,219,205,204,218,217,204,217,206,198,222,223,198,223,199,196,221,222,196,222,198,197,220,221,197,221,196,199,223,220,199,220,197,134,224,123,134,123,28,29,122,225,29,225,135,135,225,224,135,224,134,193,229,227,193,227,192,195,228,229,195,229,193,194,226,228,194,228,195,192,227,226,192,226,194 };

	// translate from origin (0,0,0) to (0,0,-5)
	for (auto& vertice : vertices) {
		vertice = vertice - CRTVector(0, 0, -20);
	}

	srand(time(NULL));
	for (size_t i = 0; i < faces.size(); i += 3) {
		triangles.emplace_back(CRTTriangle{ vertices[faces[i]], vertices[faces[i + 1]], vertices[faces[i + 2]] });
		colors.emplace_back(RGBColor{ (unsigned char)(rand() % maxColorComponent), (unsigned char)(rand() % maxColorComponent), (unsigned char)(rand() % maxColorComponent) });
	}
}

int main() {
	// taken from blender export
	std::vector<CRTTriangle> triangles;
	std::vector<RGBColor> colors;
	generateDino(triangles, colors);

	CRTCamera camera;
	camera.truck(CRTVector(20, 0, 0));
	solutionMultipleTriangle(camera, triangles, "truckedDino", colors);
	camera.dolly(CRTVector(0, 0, 20));
	solutionMultipleTriangle(camera, triangles, "truckedDollyedDino", colors);
	camera.pan(90);
	solutionMultipleTriangle(camera, triangles, "truckedDollyedPannedDino", colors);
	camera.dolly(CRTVector(0, 0, 5));
	solutionMultipleTriangle(camera, triangles, "truckedDollyedPannedDollyedDino", colors);
	camera.tilt(-90);
	solutionMultipleTriangle(camera, triangles, "truckedDollyedPannedDollyedTiltedDino", colors);

	CRTVector initialPosition = camera.position;
	CRTMatrix initialRotation = camera.rotation;
	for (size_t degs = 0; degs < 360; degs += 5) {
		solutionMultipleTriangle(camera, triangles, (std::string("clip\\dino") + std::to_string(degs)).c_str(), colors);
		// Turn table 
		const CRTMatrix zRotation = makeRotationCRTMatrixZ(degs);
		camera.rotation = initialRotation * zRotation;
		camera.position = initialPosition * zRotation;
	}

	return 0;
}
